package model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import database.DatabaseConnection;
import exceptions.AutoGeneratedIDException;

public class PostingDAO {

	public void incrementPostLikes(int postId) {
		try {
			Connection con = DatabaseConnection.getInstance().getConnection();
			String getCurrentLikesAmount = "SELECT count_likes FROM posts WHERE id=?";

			PreparedStatement stmFirst = con.prepareStatement(getCurrentLikesAmount);
			stmFirst.setInt(1, postId);

			ResultSet result = stmFirst.executeQuery();
			AtomicInteger currentLikes = new AtomicInteger(0);

			while (result.next()) {
				currentLikes = new AtomicInteger(result.getInt("count_likes"));
			}
			int updatedLikes = currentLikes.incrementAndGet();

			String query = "UPDATE posts SET count_likes =? WHERE id=?;";
			PreparedStatement stmSecond = con.prepareStatement(query);
			stmSecond.setInt(1, updatedLikes);
			stmSecond.setInt(2, postId);
			stmSecond.executeUpdate();
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
	}

	public int writeAPost(String email, String post) throws AutoGeneratedIDException {
		try {
			Connection con = DatabaseConnection.getInstance().getConnection();
			String query = "INSERT INTO posts(post, post_publisher_email, count_likes, publishing_date)"
					+ "VALUES (?,?,0,now());";

			PreparedStatement stm = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
			stm.setString(1, post);
			stm.setString(2, email);
			stm.executeUpdate();

			ResultSet generatedKey = stm.getGeneratedKeys();
			while (generatedKey.next()) {
				return generatedKey.getInt(1);
			}

		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
		throw new AutoGeneratedIDException("Unable to insert values in the database.");
	}

	public List<Post> getAllPosts(String email) {
		List<Post> allPosts = new ArrayList<Post>();
		try {
			Connection con = DatabaseConnection.getInstance().getConnection();
			String query = "SELECT po.id, po.count_likes, po.post, po.publishing_date, pe.first_name, pe.last_name "
					+ "FROM posts po " + "JOIN persons pe ON( po.post_publisher_email = pe.email ) "
					+ "WHERE po.post_publisher_email =?;";

			PreparedStatement stm = con.prepareStatement(query);
			stm.setString(1, email);
			ResultSet result = stm.executeQuery();

			while (result.next()) {

				String firstName = result.getString("first_name");
				String lastName = result.getString("last_name");
				String post = result.getString("post");
				String date = result.getString("publishing_date");
				int id = result.getInt(1);
				date = date.substring(0, 16);
				int countLikes = result.getInt("count_likes");

				Post posting = new Post(firstName, lastName, post, date, id, countLikes);
				allPosts.add(posting);
			}

			// Add all comments to any given post
			for (Post p : allPosts) {
				List<Comment> allComments = new LinkedList<>();
				allComments.addAll(this.getComments(p));
				p.addAllComment(allComments);
			}

			Collections.sort(allPosts, new Comparator<Post>() {

				@Override
				public int compare(Post o1, Post o2) {

					return o2.getDate().compareTo(o1.getDate());
				}

			});
			return allPosts;

		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
		return allPosts;
	}

	// Get comments per post
	private List<Comment> getComments(Post post) {

		int postId = post.getPostId();

		List<Comment> result = new ArrayList<>();

		try {
			Connection con = DatabaseConnection.getInstance().getConnection();
			String query = "SELECT post_id, comment, publisher_email " + "FROM facebook.comments " + "WHERE post_id=?;";

			PreparedStatement ps = con.prepareStatement(query);
			ps.setInt(1, postId);

			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				String text = rs.getString("comment");
				String email = rs.getString("publisher_email");
				Comment comment = new Comment(postId, text, email);

				result.add(comment);
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
}
